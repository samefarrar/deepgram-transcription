/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/cross-fetch/dist/browser-ponyfill.js
var require_browser_ponyfill = __commonJS({
  "node_modules/cross-fetch/dist/browser-ponyfill.js"(exports, module2) {
    var global = typeof self !== "undefined" ? self : exports;
    var __self__ = function() {
      function F() {
        this.fetch = false;
        this.DOMException = global.DOMException;
      }
      F.prototype = global;
      return new F();
    }();
    (function(self2) {
      var irrelevant = function(exports2) {
        var support = {
          searchParams: "URLSearchParams" in self2,
          iterable: "Symbol" in self2 && "iterator" in Symbol,
          blob: "FileReader" in self2 && "Blob" in self2 && function() {
            try {
              new Blob();
              return true;
            } catch (e) {
              return false;
            }
          }(),
          formData: "FormData" in self2,
          arrayBuffer: "ArrayBuffer" in self2
        };
        function isDataView(obj) {
          return obj && DataView.prototype.isPrototypeOf(obj);
        }
        if (support.arrayBuffer) {
          var viewClasses = [
            "[object Int8Array]",
            "[object Uint8Array]",
            "[object Uint8ClampedArray]",
            "[object Int16Array]",
            "[object Uint16Array]",
            "[object Int32Array]",
            "[object Uint32Array]",
            "[object Float32Array]",
            "[object Float64Array]"
          ];
          var isArrayBufferView = ArrayBuffer.isView || function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
          };
        }
        function normalizeName(name) {
          if (typeof name !== "string") {
            name = String(name);
          }
          if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
            throw new TypeError("Invalid character in header field name");
          }
          return name.toLowerCase();
        }
        function normalizeValue(value) {
          if (typeof value !== "string") {
            value = String(value);
          }
          return value;
        }
        function iteratorFor(items) {
          var iterator = {
            next: function() {
              var value = items.shift();
              return { done: value === void 0, value };
            }
          };
          if (support.iterable) {
            iterator[Symbol.iterator] = function() {
              return iterator;
            };
          }
          return iterator;
        }
        function Headers2(headers) {
          this.map = {};
          if (headers instanceof Headers2) {
            headers.forEach(function(value, name) {
              this.append(name, value);
            }, this);
          } else if (Array.isArray(headers)) {
            headers.forEach(function(header) {
              this.append(header[0], header[1]);
            }, this);
          } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function(name) {
              this.append(name, headers[name]);
            }, this);
          }
        }
        Headers2.prototype.append = function(name, value) {
          name = normalizeName(name);
          value = normalizeValue(value);
          var oldValue = this.map[name];
          this.map[name] = oldValue ? oldValue + ", " + value : value;
        };
        Headers2.prototype["delete"] = function(name) {
          delete this.map[normalizeName(name)];
        };
        Headers2.prototype.get = function(name) {
          name = normalizeName(name);
          return this.has(name) ? this.map[name] : null;
        };
        Headers2.prototype.has = function(name) {
          return this.map.hasOwnProperty(normalizeName(name));
        };
        Headers2.prototype.set = function(name, value) {
          this.map[normalizeName(name)] = normalizeValue(value);
        };
        Headers2.prototype.forEach = function(callback, thisArg) {
          for (var name in this.map) {
            if (this.map.hasOwnProperty(name)) {
              callback.call(thisArg, this.map[name], name, this);
            }
          }
        };
        Headers2.prototype.keys = function() {
          var items = [];
          this.forEach(function(value, name) {
            items.push(name);
          });
          return iteratorFor(items);
        };
        Headers2.prototype.values = function() {
          var items = [];
          this.forEach(function(value) {
            items.push(value);
          });
          return iteratorFor(items);
        };
        Headers2.prototype.entries = function() {
          var items = [];
          this.forEach(function(value, name) {
            items.push([name, value]);
          });
          return iteratorFor(items);
        };
        if (support.iterable) {
          Headers2.prototype[Symbol.iterator] = Headers2.prototype.entries;
        }
        function consumed(body) {
          if (body.bodyUsed) {
            return Promise.reject(new TypeError("Already read"));
          }
          body.bodyUsed = true;
        }
        function fileReaderReady(reader) {
          return new Promise(function(resolve, reject) {
            reader.onload = function() {
              resolve(reader.result);
            };
            reader.onerror = function() {
              reject(reader.error);
            };
          });
        }
        function readBlobAsArrayBuffer(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsArrayBuffer(blob);
          return promise;
        }
        function readBlobAsText(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsText(blob);
          return promise;
        }
        function readArrayBufferAsText(buf) {
          var view = new Uint8Array(buf);
          var chars = new Array(view.length);
          for (var i = 0; i < view.length; i++) {
            chars[i] = String.fromCharCode(view[i]);
          }
          return chars.join("");
        }
        function bufferClone(buf) {
          if (buf.slice) {
            return buf.slice(0);
          } else {
            var view = new Uint8Array(buf.byteLength);
            view.set(new Uint8Array(buf));
            return view.buffer;
          }
        }
        function Body() {
          this.bodyUsed = false;
          this._initBody = function(body) {
            this._bodyInit = body;
            if (!body) {
              this._bodyText = "";
            } else if (typeof body === "string") {
              this._bodyText = body;
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
              this._bodyBlob = body;
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
              this._bodyFormData = body;
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this._bodyText = body.toString();
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
              this._bodyArrayBuffer = bufferClone(body.buffer);
              this._bodyInit = new Blob([this._bodyArrayBuffer]);
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
              this._bodyArrayBuffer = bufferClone(body);
            } else {
              this._bodyText = body = Object.prototype.toString.call(body);
            }
            if (!this.headers.get("content-type")) {
              if (typeof body === "string") {
                this.headers.set("content-type", "text/plain;charset=UTF-8");
              } else if (this._bodyBlob && this._bodyBlob.type) {
                this.headers.set("content-type", this._bodyBlob.type);
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
              }
            }
          };
          if (support.blob) {
            this.blob = function() {
              var rejected = consumed(this);
              if (rejected) {
                return rejected;
              }
              if (this._bodyBlob) {
                return Promise.resolve(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(new Blob([this._bodyArrayBuffer]));
              } else if (this._bodyFormData) {
                throw new Error("could not read FormData body as blob");
              } else {
                return Promise.resolve(new Blob([this._bodyText]));
              }
            };
            this.arrayBuffer = function() {
              if (this._bodyArrayBuffer) {
                return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
              } else {
                return this.blob().then(readBlobAsArrayBuffer);
              }
            };
          }
          this.text = function() {
            var rejected = consumed(this);
            if (rejected) {
              return rejected;
            }
            if (this._bodyBlob) {
              return readBlobAsText(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
            } else if (this._bodyFormData) {
              throw new Error("could not read FormData body as text");
            } else {
              return Promise.resolve(this._bodyText);
            }
          };
          if (support.formData) {
            this.formData = function() {
              return this.text().then(decode);
            };
          }
          this.json = function() {
            return this.text().then(JSON.parse);
          };
          return this;
        }
        var methods = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];
        function normalizeMethod(method) {
          var upcased = method.toUpperCase();
          return methods.indexOf(upcased) > -1 ? upcased : method;
        }
        function Request(input, options) {
          options = options || {};
          var body = options.body;
          if (input instanceof Request) {
            if (input.bodyUsed) {
              throw new TypeError("Already read");
            }
            this.url = input.url;
            this.credentials = input.credentials;
            if (!options.headers) {
              this.headers = new Headers2(input.headers);
            }
            this.method = input.method;
            this.mode = input.mode;
            this.signal = input.signal;
            if (!body && input._bodyInit != null) {
              body = input._bodyInit;
              input.bodyUsed = true;
            }
          } else {
            this.url = String(input);
          }
          this.credentials = options.credentials || this.credentials || "same-origin";
          if (options.headers || !this.headers) {
            this.headers = new Headers2(options.headers);
          }
          this.method = normalizeMethod(options.method || this.method || "GET");
          this.mode = options.mode || this.mode || null;
          this.signal = options.signal || this.signal;
          this.referrer = null;
          if ((this.method === "GET" || this.method === "HEAD") && body) {
            throw new TypeError("Body not allowed for GET or HEAD requests");
          }
          this._initBody(body);
        }
        Request.prototype.clone = function() {
          return new Request(this, { body: this._bodyInit });
        };
        function decode(body) {
          var form = new FormData();
          body.trim().split("&").forEach(function(bytes) {
            if (bytes) {
              var split = bytes.split("=");
              var name = split.shift().replace(/\+/g, " ");
              var value = split.join("=").replace(/\+/g, " ");
              form.append(decodeURIComponent(name), decodeURIComponent(value));
            }
          });
          return form;
        }
        function parseHeaders(rawHeaders) {
          var headers = new Headers2();
          var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
          preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
            var parts = line.split(":");
            var key = parts.shift().trim();
            if (key) {
              var value = parts.join(":").trim();
              headers.append(key, value);
            }
          });
          return headers;
        }
        Body.call(Request.prototype);
        function Response2(bodyInit, options) {
          if (!options) {
            options = {};
          }
          this.type = "default";
          this.status = options.status === void 0 ? 200 : options.status;
          this.ok = this.status >= 200 && this.status < 300;
          this.statusText = "statusText" in options ? options.statusText : "OK";
          this.headers = new Headers2(options.headers);
          this.url = options.url || "";
          this._initBody(bodyInit);
        }
        Body.call(Response2.prototype);
        Response2.prototype.clone = function() {
          return new Response2(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers2(this.headers),
            url: this.url
          });
        };
        Response2.error = function() {
          var response = new Response2(null, { status: 0, statusText: "" });
          response.type = "error";
          return response;
        };
        var redirectStatuses = [301, 302, 303, 307, 308];
        Response2.redirect = function(url, status) {
          if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError("Invalid status code");
          }
          return new Response2(null, { status, headers: { location: url } });
        };
        exports2.DOMException = self2.DOMException;
        try {
          new exports2.DOMException();
        } catch (err) {
          exports2.DOMException = function(message, name) {
            this.message = message;
            this.name = name;
            var error = Error(message);
            this.stack = error.stack;
          };
          exports2.DOMException.prototype = Object.create(Error.prototype);
          exports2.DOMException.prototype.constructor = exports2.DOMException;
        }
        function fetch2(input, init) {
          return new Promise(function(resolve, reject) {
            var request = new Request(input, init);
            if (request.signal && request.signal.aborted) {
              return reject(new exports2.DOMException("Aborted", "AbortError"));
            }
            var xhr = new XMLHttpRequest();
            function abortXhr() {
              xhr.abort();
            }
            xhr.onload = function() {
              var options = {
                status: xhr.status,
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || "")
              };
              options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
              var body = "response" in xhr ? xhr.response : xhr.responseText;
              resolve(new Response2(body, options));
            };
            xhr.onerror = function() {
              reject(new TypeError("Network request failed"));
            };
            xhr.ontimeout = function() {
              reject(new TypeError("Network request failed"));
            };
            xhr.onabort = function() {
              reject(new exports2.DOMException("Aborted", "AbortError"));
            };
            xhr.open(request.method, request.url, true);
            if (request.credentials === "include") {
              xhr.withCredentials = true;
            } else if (request.credentials === "omit") {
              xhr.withCredentials = false;
            }
            if ("responseType" in xhr && support.blob) {
              xhr.responseType = "blob";
            }
            request.headers.forEach(function(value, name) {
              xhr.setRequestHeader(name, value);
            });
            if (request.signal) {
              request.signal.addEventListener("abort", abortXhr);
              xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                  request.signal.removeEventListener("abort", abortXhr);
                }
              };
            }
            xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
          });
        }
        fetch2.polyfill = true;
        if (!self2.fetch) {
          self2.fetch = fetch2;
          self2.Headers = Headers2;
          self2.Request = Request;
          self2.Response = Response2;
        }
        exports2.Headers = Headers2;
        exports2.Request = Request;
        exports2.Response = Response2;
        exports2.fetch = fetch2;
        Object.defineProperty(exports2, "__esModule", { value: true });
        return exports2;
      }({});
    })(__self__);
    __self__.fetch.ponyfill = true;
    delete __self__.fetch.polyfill;
    var ctx = __self__;
    exports = ctx.fetch;
    exports.default = ctx.fetch;
    exports.fetch = ctx.fetch;
    exports.Headers = ctx.Headers;
    exports.Request = ctx.Request;
    exports.Response = ctx.Response;
    module2.exports = exports;
  }
});

// node_modules/deepmerge/dist/cjs.js
var require_cjs = __commonJS({
  "node_modules/deepmerge/dist/cjs.js"(exports, module2) {
    "use strict";
    var isMergeableObject = function isMergeableObject2(value) {
      return isNonNullObject(value) && !isSpecial(value);
    };
    function isNonNullObject(value) {
      return !!value && typeof value === "object";
    }
    function isSpecial(value) {
      var stringValue = Object.prototype.toString.call(value);
      return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
    }
    var canUseSymbol = typeof Symbol === "function" && Symbol.for;
    var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
    function isReactElement(value) {
      return value.$$typeof === REACT_ELEMENT_TYPE;
    }
    function emptyTarget(val) {
      return Array.isArray(val) ? [] : {};
    }
    function cloneUnlessOtherwiseSpecified(value, options) {
      return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
    }
    function defaultArrayMerge(target, source, options) {
      return target.concat(source).map(function(element) {
        return cloneUnlessOtherwiseSpecified(element, options);
      });
    }
    function getMergeFunction(key, options) {
      if (!options.customMerge) {
        return deepmerge;
      }
      var customMerge = options.customMerge(key);
      return typeof customMerge === "function" ? customMerge : deepmerge;
    }
    function getEnumerableOwnPropertySymbols(target) {
      return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
        return Object.propertyIsEnumerable.call(target, symbol);
      }) : [];
    }
    function getKeys(target) {
      return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
    }
    function propertyIsOnObject(object, property) {
      try {
        return property in object;
      } catch (_) {
        return false;
      }
    }
    function propertyIsUnsafe(target, key) {
      return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));
    }
    function mergeObject(target, source, options) {
      var destination = {};
      if (options.isMergeableObject(target)) {
        getKeys(target).forEach(function(key) {
          destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
        });
      }
      getKeys(source).forEach(function(key) {
        if (propertyIsUnsafe(target, key)) {
          return;
        }
        if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
          destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
        } else {
          destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
        }
      });
      return destination;
    }
    function deepmerge(target, source, options) {
      options = options || {};
      options.arrayMerge = options.arrayMerge || defaultArrayMerge;
      options.isMergeableObject = options.isMergeableObject || isMergeableObject;
      options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
      var sourceIsArray = Array.isArray(source);
      var targetIsArray = Array.isArray(target);
      var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
      if (!sourceAndTargetTypesMatch) {
        return cloneUnlessOtherwiseSpecified(source, options);
      } else if (sourceIsArray) {
        return options.arrayMerge(target, source, options);
      } else {
        return mergeObject(target, source, options);
      }
    }
    deepmerge.all = function deepmergeAll(array, options) {
      if (!Array.isArray(array)) {
        throw new Error("first argument should be an array");
      }
      return array.reduce(function(prev, next) {
        return deepmerge(prev, next, options);
      }, {});
    };
    var deepmerge_1 = deepmerge;
    module2.exports = deepmerge_1;
  }
});

// node_modules/es5-ext/global.js
var require_global = __commonJS({
  "node_modules/es5-ext/global.js"(exports, module2) {
    var naiveFallback = function() {
      if (typeof self === "object" && self)
        return self;
      if (typeof window === "object" && window)
        return window;
      throw new Error("Unable to resolve global `this`");
    };
    module2.exports = function() {
      if (this)
        return this;
      if (typeof globalThis === "object" && globalThis)
        return globalThis;
      try {
        Object.defineProperty(Object.prototype, "__global__", {
          get: function() {
            return this;
          },
          configurable: true
        });
      } catch (error) {
        return naiveFallback();
      }
      try {
        if (!__global__)
          return naiveFallback();
        return __global__;
      } finally {
        delete Object.prototype.__global__;
      }
    }();
  }
});

// node_modules/websocket/package.json
var require_package = __commonJS({
  "node_modules/websocket/package.json"(exports, module2) {
    module2.exports = {
      _from: "websocket@^1.0.34",
      _id: "websocket@1.0.34",
      _inBundle: false,
      _integrity: "sha512-PRDso2sGwF6kM75QykIesBijKSVceR6jL2G8NGYyq2XrItNC2P5/qL5XeR056GhA+Ly7JMFvJb9I312mJfmqnQ==",
      _location: "/websocket",
      _phantomChildren: {},
      _requested: {
        type: "range",
        registry: true,
        raw: "websocket@^1.0.34",
        name: "websocket",
        escapedName: "websocket",
        rawSpec: "^1.0.34",
        saveSpec: null,
        fetchSpec: "^1.0.34"
      },
      _requiredBy: [
        "/@deepgram/sdk"
      ],
      _resolved: "https://registry.npmjs.org/websocket/-/websocket-1.0.34.tgz",
      _shasum: "2bdc2602c08bf2c82253b730655c0ef7dcab3111",
      _spec: "websocket@^1.0.34",
      _where: "/Users/samfarrar/Documents/transcription_test/deepgram-transcription/node_modules/@deepgram/sdk",
      author: {
        name: "Brian McKelvey",
        email: "theturtle32@gmail.com",
        url: "https://github.com/theturtle32"
      },
      browser: "lib/browser.js",
      bugs: {
        url: "https://github.com/theturtle32/WebSocket-Node/issues"
      },
      bundleDependencies: false,
      config: {
        verbose: false
      },
      contributors: [
        {
          name: "I\xF1aki Baz Castillo",
          email: "ibc@aliax.net",
          url: "http://dev.sipdoc.net"
        }
      ],
      dependencies: {
        bufferutil: "^4.0.1",
        debug: "^2.2.0",
        "es5-ext": "^0.10.50",
        "typedarray-to-buffer": "^3.1.5",
        "utf-8-validate": "^5.0.2",
        yaeti: "^0.0.6"
      },
      deprecated: false,
      description: "Websocket Client & Server Library implementing the WebSocket protocol as specified in RFC 6455.",
      devDependencies: {
        "buffer-equal": "^1.0.0",
        gulp: "^4.0.2",
        "gulp-jshint": "^2.0.4",
        jshint: "^2.0.0",
        "jshint-stylish": "^2.2.1",
        tape: "^4.9.1"
      },
      directories: {
        lib: "./lib"
      },
      engines: {
        node: ">=4.0.0"
      },
      homepage: "https://github.com/theturtle32/WebSocket-Node",
      keywords: [
        "websocket",
        "websockets",
        "socket",
        "networking",
        "comet",
        "push",
        "RFC-6455",
        "realtime",
        "server",
        "client"
      ],
      license: "Apache-2.0",
      main: "index",
      name: "websocket",
      repository: {
        type: "git",
        url: "git+https://github.com/theturtle32/WebSocket-Node.git"
      },
      scripts: {
        gulp: "gulp",
        test: "tape test/unit/*.js"
      },
      version: "1.0.34"
    };
  }
});

// node_modules/websocket/lib/version.js
var require_version = __commonJS({
  "node_modules/websocket/lib/version.js"(exports, module2) {
    module2.exports = require_package().version;
  }
});

// node_modules/websocket/lib/browser.js
var require_browser = __commonJS({
  "node_modules/websocket/lib/browser.js"(exports, module2) {
    var _globalThis;
    if (typeof globalThis === "object") {
      _globalThis = globalThis;
    } else {
      try {
        _globalThis = require_global();
      } catch (error) {
      } finally {
        if (!_globalThis && typeof window !== "undefined") {
          _globalThis = window;
        }
        if (!_globalThis) {
          throw new Error("Could not determine global this");
        }
      }
    }
    var NativeWebSocket = _globalThis.WebSocket || _globalThis.MozWebSocket;
    var websocket_version = require_version();
    function W3CWebSocket(uri, protocols) {
      var native_instance;
      if (protocols) {
        native_instance = new NativeWebSocket(uri, protocols);
      } else {
        native_instance = new NativeWebSocket(uri);
      }
      return native_instance;
    }
    if (NativeWebSocket) {
      ["CONNECTING", "OPEN", "CLOSING", "CLOSED"].forEach(function(prop) {
        Object.defineProperty(W3CWebSocket, prop, {
          get: function() {
            return NativeWebSocket[prop];
          }
        });
      });
    }
    module2.exports = {
      "w3cwebsocket": NativeWebSocket ? W3CWebSocket : null,
      "version": websocket_version
    };
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DeepgramPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// node_modules/@deepgram/sdk/dist/module/lib/errors.js
var DeepgramError = class extends Error {
  constructor(message) {
    super(message);
    this.__dgError = true;
    this.name = "DeepgramError";
  }
};
function isDeepgramError(error) {
  return typeof error === "object" && error !== null && "__dgError" in error;
}
var DeepgramApiError = class extends DeepgramError {
  constructor(message, status) {
    super(message);
    this.name = "DeepgramApiError";
    this.status = status;
  }
  toJSON() {
    return {
      name: this.name,
      message: this.message,
      status: this.status
    };
  }
};
var DeepgramUnknownError = class extends DeepgramError {
  constructor(message, originalError) {
    super(message);
    this.name = "DeepgramUnknownError";
    this.originalError = originalError;
  }
};
var DeepgramVersionError = class extends DeepgramError {
  constructor() {
    super(`You are attempting to use an old format for a newer SDK version. Read more here: https://dpgr.am/js-v3`);
    this.name = "DeepgramVersionError";
  }
};

// node_modules/@deepgram/sdk/dist/module/lib/helpers.js
var import_cross_fetch = __toESM(require_browser_ponyfill());
var import_deepmerge = __toESM(require_cjs());
function stripTrailingSlash(url) {
  return url.replace(/\/$/, "");
}
var isBrowser = () => typeof window !== "undefined";
function applySettingDefaults(options, defaults) {
  return (0, import_deepmerge.default)(defaults, options);
}
function appendSearchParams(searchParams, options) {
  Object.keys(options).forEach((i) => {
    if (Array.isArray(options[i])) {
      const arrayParams = options[i];
      arrayParams.forEach((param) => {
        searchParams.append(i, String(param));
      });
    } else {
      searchParams.append(i, String(options[i]));
    }
  });
}
var resolveHeadersConstructor = () => {
  if (typeof Headers === "undefined") {
    return import_cross_fetch.Headers;
  }
  return Headers;
};
var isUrlSource = (providedSource) => {
  if (providedSource.url)
    return true;
  return false;
};
var isTextSource = (providedSource) => {
  if (providedSource.text)
    return true;
  return false;
};
var isFileSource = (providedSource) => {
  if (isReadStreamSource(providedSource) || isBufferSource(providedSource))
    return true;
  return false;
};
var isBufferSource = (providedSource) => {
  if (providedSource)
    return true;
  return false;
};
var isReadStreamSource = (providedSource) => {
  if (providedSource)
    return true;
  return false;
};

// node_modules/@deepgram/sdk/dist/module/lib/version.js
var version = "3.3.1";

// node_modules/@deepgram/sdk/dist/module/lib/constants.js
var NODE_VERSION = process.versions.node;
var DEFAULT_HEADERS = {
  "Content-Type": `application/json`,
  "X-Client-Info": `@deepgram/sdk; ${isBrowser() ? "browser" : "server"}; v${version}`,
  "User-Agent": `@deepgram/sdk/${version} ${isBrowser() ? "javascript" : `node/${NODE_VERSION}`}`
};
var DEFAULT_URL = "https://api.deepgram.com";
var DEFAULT_GLOBAL_OPTIONS = {
  url: DEFAULT_URL
};
var DEFAULT_FETCH_OPTIONS = {
  headers: DEFAULT_HEADERS
};
var DEFAULT_OPTIONS = {
  global: DEFAULT_GLOBAL_OPTIONS,
  fetch: DEFAULT_FETCH_OPTIONS
};

// node_modules/@deepgram/sdk/dist/module/packages/AbstractClient.js
var AbstractClient = class {
  constructor(key, options) {
    var _a, _b;
    this.key = key;
    this.options = options;
    this.key = key;
    if (!key) {
      this.key = process.env.DEEPGRAM_API_KEY;
    }
    if (!this.key) {
      throw new DeepgramError("A deepgram API key is required");
    }
    this.options = applySettingDefaults(options, DEFAULT_OPTIONS);
    if (!((_a = this.options.global) === null || _a === void 0 ? void 0 : _a.url)) {
      throw new DeepgramError(`An API URL is required. It should be set to ${DEFAULT_URL} by default. No idea what happened!`);
    }
    let baseUrlString = this.options.global.url;
    let proxyUrlString;
    if (!baseUrlString.startsWith("http") && !baseUrlString.startsWith("ws")) {
      console.warn(`The base URL provided does not begin with http, https, ws, or wss and will default to https as standard.`);
    }
    if ((_b = this.options.restProxy) === null || _b === void 0 ? void 0 : _b.url) {
      if (this.key !== "proxy") {
        throw new DeepgramError(`Do not attempt to pass any other API key than the string "proxy" when making proxied REST requests. Please ensure your proxy application is responsible for writing our API key to the Authorization header.`);
      }
      proxyUrlString = this.options.restProxy.url;
      if (!proxyUrlString.startsWith("http") && !proxyUrlString.startsWith("ws")) {
        console.warn(`The proxy URL provided does not begin with http, https, ws, or wss and will default to https as standard.`);
      }
      baseUrlString = proxyUrlString;
    }
    this.baseUrl = this.resolveBaseUrl(baseUrlString);
  }
  resolveBaseUrl(url) {
    if (!/^https?:\/\//i.test(url)) {
      url = "https://" + url;
    }
    return new URL(stripTrailingSlash(url));
  }
  willProxy() {
    var _a;
    const proxyUrl = (_a = this.options.restProxy) === null || _a === void 0 ? void 0 : _a.url;
    return !!proxyUrl;
  }
};

// node_modules/@deepgram/sdk/dist/module/packages/AbstractWsClient.js
var import_events = require("events");
var AbstractWsClient = class extends import_events.EventEmitter {
  constructor(key, options = DEFAULT_OPTIONS) {
    var _a;
    super();
    this.key = key;
    this.options = options;
    this.key = key;
    if (!key) {
      this.key = process.env.DEEPGRAM_API_KEY;
    }
    if (!this.key) {
      throw new Error("A deepgram API key is required");
    }
    this.options = applySettingDefaults(options, DEFAULT_OPTIONS);
    if (!((_a = this.options.global) === null || _a === void 0 ? void 0 : _a.url)) {
      throw new Error(`An API URL is required. It should be set to ${DEFAULT_URL} by default. No idea what happened!`);
    }
    let url = this.options.global.url;
    if (!/^https?:\/\//i.test(url)) {
      url = "https://" + url;
    }
    this.baseUrl = new URL(stripTrailingSlash(url));
    this.baseUrl.protocol = this.baseUrl.protocol.toLowerCase().replace(/(http)(s)?/gi, "ws$2");
  }
};

// node_modules/@deepgram/sdk/dist/module/lib/enums/LiveConnectionState.js
var LiveConnectionState;
(function(LiveConnectionState2) {
  LiveConnectionState2[LiveConnectionState2["CONNECTING"] = 0] = "CONNECTING";
  LiveConnectionState2[LiveConnectionState2["OPEN"] = 1] = "OPEN";
  LiveConnectionState2[LiveConnectionState2["CLOSING"] = 2] = "CLOSING";
  LiveConnectionState2[LiveConnectionState2["CLOSED"] = 3] = "CLOSED";
})(LiveConnectionState || (LiveConnectionState = {}));

// node_modules/@deepgram/sdk/dist/module/lib/enums/LiveTranscriptionEvents.js
var LiveTranscriptionEvents;
(function(LiveTranscriptionEvents2) {
  LiveTranscriptionEvents2["Open"] = "open";
  LiveTranscriptionEvents2["Close"] = "close";
  LiveTranscriptionEvents2["Transcript"] = "Results";
  LiveTranscriptionEvents2["Metadata"] = "Metadata";
  LiveTranscriptionEvents2["Error"] = "error";
  LiveTranscriptionEvents2["Warning"] = "warning";
  LiveTranscriptionEvents2["UtteranceEnd"] = "UtteranceEnd";
  LiveTranscriptionEvents2["SpeechStarted"] = "SpeechStarted";
})(LiveTranscriptionEvents || (LiveTranscriptionEvents = {}));

// node_modules/@deepgram/sdk/dist/module/packages/LiveClient.js
var import_websocket = __toESM(require_browser());
var LiveClient = class extends AbstractWsClient {
  constructor(key, options = DEFAULT_OPTIONS, transcriptionOptions = {}, endpoint = "v1/listen") {
    super(key, options);
    this.key = key;
    this.options = options;
    this.transcriptionOptions = transcriptionOptions;
    const url = new URL(endpoint, this.baseUrl);
    url.protocol = url.protocol.toLowerCase().replace(/(http)(s)?/gi, "ws$2");
    appendSearchParams(url.searchParams, this.transcriptionOptions);
    this._socket = new import_websocket.w3cwebsocket(url.toString(), ["token", this.key]);
    this._socket.onopen = () => {
      this.emit(LiveTranscriptionEvents.Open, this);
    };
    this._socket.onclose = (event) => {
      this.emit(LiveTranscriptionEvents.Close, event);
    };
    this._socket.onerror = (event) => {
      this.emit(LiveTranscriptionEvents.Error, event);
    };
    this._socket.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data.toString());
        if (data.type === LiveTranscriptionEvents.Metadata) {
          this.emit(LiveTranscriptionEvents.Metadata, data);
        }
        if (data.type === LiveTranscriptionEvents.Transcript) {
          this.emit(LiveTranscriptionEvents.Transcript, data);
        }
        if (data.type === LiveTranscriptionEvents.UtteranceEnd) {
          this.emit(LiveTranscriptionEvents.UtteranceEnd, data);
        }
        if (data.type === LiveTranscriptionEvents.SpeechStarted) {
          this.emit(LiveTranscriptionEvents.SpeechStarted, data);
        }
      } catch (error) {
        this.emit(LiveTranscriptionEvents.Error, {
          event,
          message: "Unable to parse `data` as JSON.",
          error
        });
      }
    };
  }
  configure(config) {
    this._socket.send(JSON.stringify({
      type: "Configure",
      processors: config
    }));
  }
  keepAlive() {
    this._socket.send(JSON.stringify({
      type: "KeepAlive"
    }));
  }
  getReadyState() {
    return this._socket.readyState;
  }
  /**
   * Sends data to the Deepgram API via websocket connection
   * @param data Audio data to send to Deepgram
   *
   * Conforms to RFC #146 for Node.js - does not send an empty byte.
   * In the browser, a Blob will contain length with no audio.
   * @see https://github.com/deepgram/deepgram-python-sdk/issues/146
   */
  send(data) {
    if (this._socket.readyState === LiveConnectionState.OPEN) {
      if (typeof data === "string") {
        this._socket.send(data);
      } else if (data instanceof Blob) {
        this._socket.send(data);
      } else {
        const buffer = data;
        if (buffer.byteLength > 0) {
          this._socket.send(buffer);
        } else {
          this.emit(LiveTranscriptionEvents.Warning, "Zero-byte detected, skipping. Send `CloseStream` if trying to close the connection.");
        }
      }
    } else {
      throw new DeepgramError("Could not send. Connection not open.");
    }
  }
  /**
   * Denote that you are finished sending audio and close
   * the websocket connection when transcription is finished
   */
  finish() {
    this._socket.send(JSON.stringify({
      type: "CloseStream"
    }));
  }
};

// node_modules/@deepgram/sdk/dist/module/lib/fetch.js
var import_cross_fetch2 = __toESM(require_browser_ponyfill());
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var resolveFetch = (customFetch) => {
  let _fetch;
  if (customFetch) {
    _fetch = customFetch;
  } else if (typeof fetch === "undefined") {
    _fetch = import_cross_fetch2.default;
  } else {
    _fetch = fetch;
  }
  return (...args) => _fetch(...args);
};
var fetchWithAuth = (apiKey, customFetch) => {
  const fetch2 = resolveFetch(customFetch);
  const HeadersConstructor = resolveHeadersConstructor();
  return (input, init) => __awaiter(void 0, void 0, void 0, function* () {
    let headers = new HeadersConstructor(init === null || init === void 0 ? void 0 : init.headers);
    if (!headers.has("Authorization")) {
      headers.set("Authorization", `Token ${apiKey}`);
    }
    return fetch2(input, Object.assign(Object.assign({}, init), { headers }));
  });
};
var resolveResponse = () => __awaiter(void 0, void 0, void 0, function* () {
  if (typeof Response === "undefined") {
    return (yield Promise.resolve().then(() => __toESM(require_browser_ponyfill()))).Response;
  }
  return Response;
});

// node_modules/@deepgram/sdk/dist/module/packages/AbstractRestfulClient.js
var __awaiter2 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var AbstractRestfulClient = class extends AbstractClient {
  constructor(key, options) {
    super(key, options);
    this.key = key;
    this.options = options;
    if (isBrowser() && !this._willProxy()) {
      throw new DeepgramError("Due to CORS we are unable to support REST-based API calls to our API from the browser. Please consider using a proxy, and including a `restProxy: { url: ''}` in your Deepgram client options.");
    }
    this.fetch = fetchWithAuth(this.key, options._experimentalCustomFetch);
  }
  _getErrorMessage(err) {
    return err.msg || err.message || err.error_description || err.error || JSON.stringify(err);
  }
  handleError(error, reject) {
    return __awaiter2(this, void 0, void 0, function* () {
      const Res = yield resolveResponse();
      if (error instanceof Res) {
        error.json().then((err) => {
          reject(new DeepgramApiError(this._getErrorMessage(err), error.status || 500));
        }).catch((err) => {
          reject(new DeepgramUnknownError(this._getErrorMessage(err), err));
        });
      } else {
        reject(new DeepgramUnknownError(this._getErrorMessage(error), error));
      }
    });
  }
  _getRequestParams(method, headers, parameters, body) {
    var _a, _b, _c;
    const params = Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.fetch), { method, headers: Object.assign(Object.assign({}, (_c = (_b = this.options) === null || _b === void 0 ? void 0 : _b.fetch) === null || _c === void 0 ? void 0 : _c.headers), headers) || {} });
    if (method === "GET") {
      return params;
    }
    params.body = body;
    params.duplex = "half";
    return Object.assign(Object.assign({}, params), parameters);
  }
  _handleRequest(fetcher, method, url, headers, parameters, body) {
    return __awaiter2(this, void 0, void 0, function* () {
      return new Promise((resolve, reject) => {
        fetcher(url, this._getRequestParams(method, headers, parameters, body)).then((result) => {
          if (!result.ok)
            throw result;
          return result.json();
        }).then((data) => resolve(data)).catch((error) => this.handleError(error, reject));
      });
    });
  }
  _handleRawRequest(fetcher, method, url, headers, parameters, body) {
    return __awaiter2(this, void 0, void 0, function* () {
      return new Promise((resolve, reject) => {
        fetcher(url, this._getRequestParams(method, headers, parameters, body)).then((result) => {
          if (!result.ok)
            throw result;
          return result;
        }).then((data) => resolve(data)).catch((error) => this.handleError(error, reject));
      });
    });
  }
  get(fetcher, url, headers, parameters) {
    return __awaiter2(this, void 0, void 0, function* () {
      return this._handleRequest(fetcher, "GET", url, headers, parameters);
    });
  }
  post(fetcher, url, body, headers, parameters) {
    return __awaiter2(this, void 0, void 0, function* () {
      return this._handleRequest(fetcher, "POST", url, headers, parameters, body);
    });
  }
  put(fetcher, url, body, headers, parameters) {
    return __awaiter2(this, void 0, void 0, function* () {
      return this._handleRequest(fetcher, "PUT", url, headers, parameters, body);
    });
  }
  patch(fetcher, url, body, headers, parameters) {
    return __awaiter2(this, void 0, void 0, function* () {
      return this._handleRequest(fetcher, "PATCH", url, headers, parameters, body);
    });
  }
  delete(fetcher, url, headers, parameters) {
    return __awaiter2(this, void 0, void 0, function* () {
      return this._handleRequest(fetcher, "DELETE", url, headers, parameters);
    });
  }
  _willProxy() {
    var _a;
    const proxyUrl = (_a = this.options.restProxy) === null || _a === void 0 ? void 0 : _a.url;
    return !!proxyUrl;
  }
};

// node_modules/@deepgram/sdk/dist/module/packages/PrerecordedClient.js
var __awaiter3 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var PrerecordedClient = class extends AbstractRestfulClient {
  transcribeUrl(source, options, endpoint = "v1/listen") {
    return __awaiter3(this, void 0, void 0, function* () {
      try {
        let body;
        if (isUrlSource(source)) {
          body = JSON.stringify(source);
        } else {
          throw new DeepgramError("Unknown transcription source type");
        }
        if (options !== void 0 && "callback" in options) {
          throw new DeepgramError("Callback cannot be provided as an option to a synchronous transcription. Use `transcribeUrlCallback` or `transcribeFileCallback` instead.");
        }
        const transcriptionOptions = Object.assign({}, options);
        const url = new URL(endpoint, this.baseUrl);
        appendSearchParams(url.searchParams, transcriptionOptions);
        const result = yield this.post(this.fetch, url, body);
        return { result, error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { result: null, error };
        }
        throw error;
      }
    });
  }
  transcribeFile(source, options, endpoint = "v1/listen") {
    return __awaiter3(this, void 0, void 0, function* () {
      try {
        let body;
        if (isFileSource(source)) {
          body = source;
        } else {
          throw new DeepgramError("Unknown transcription source type");
        }
        if (options !== void 0 && "callback" in options) {
          throw new DeepgramError("Callback cannot be provided as an option to a synchronous transcription. Use `transcribeUrlCallback` or `transcribeFileCallback` instead.");
        }
        const transcriptionOptions = Object.assign({}, options);
        const url = new URL(endpoint, this.baseUrl);
        appendSearchParams(url.searchParams, transcriptionOptions);
        const result = yield this.post(this.fetch, url, body, {
          "Content-Type": "deepgram/audio+video"
        });
        return { result, error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { result: null, error };
        }
        throw error;
      }
    });
  }
  transcribeUrlCallback(source, callback, options, endpoint = "v1/listen") {
    return __awaiter3(this, void 0, void 0, function* () {
      try {
        let body;
        if (isUrlSource(source)) {
          body = JSON.stringify(source);
        } else {
          throw new DeepgramError("Unknown transcription source type");
        }
        const transcriptionOptions = Object.assign(Object.assign({}, options), { callback: callback.toString() });
        const url = new URL(endpoint, this.baseUrl);
        appendSearchParams(url.searchParams, transcriptionOptions);
        const result = yield this.post(this.fetch, url, body);
        return { result, error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { result: null, error };
        }
        throw error;
      }
    });
  }
  transcribeFileCallback(source, callback, options, endpoint = "v1/listen") {
    return __awaiter3(this, void 0, void 0, function* () {
      try {
        let body;
        if (isFileSource(source)) {
          body = source;
        } else {
          throw new DeepgramError("Unknown transcription source type");
        }
        const transcriptionOptions = Object.assign(Object.assign({}, options), { callback: callback.toString() });
        const url = new URL(endpoint, this.baseUrl);
        appendSearchParams(url.searchParams, transcriptionOptions);
        const result = yield this.post(this.fetch, url, body, {
          "Content-Type": "deepgram/audio+video"
        });
        return { result, error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { result: null, error };
        }
        throw error;
      }
    });
  }
};

// node_modules/@deepgram/sdk/dist/module/packages/ListenClient.js
var ListenClient = class extends AbstractClient {
  get prerecorded() {
    return new PrerecordedClient(this.key, this.options);
  }
  live(transcriptionOptions, endpoint = "v1/listen") {
    return new LiveClient(this.key, this.options, transcriptionOptions, endpoint);
  }
};

// node_modules/@deepgram/sdk/dist/module/packages/ManageClient.js
var __awaiter4 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var ManageClient = class extends AbstractRestfulClient {
  /**
   * @see https://developers.deepgram.com/docs/authenticating#test-request
   */
  getTokenDetails(endpoint = "v1/auth/token") {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const url = new URL(this.baseUrl);
        url.pathname = endpoint;
        const result = yield this.get(this.fetch, url);
        return { result, error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { result: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * @see https://developers.deepgram.com/reference/get-projects
   */
  getProjects(endpoint = "v1/projects") {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const url = new URL(this.baseUrl);
        url.pathname = endpoint;
        const result = yield this.get(this.fetch, url);
        return { result, error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { result: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * @see https://developers.deepgram.com/reference/get-project
   */
  getProject(projectId, endpoint = "v1/projects/:projectId") {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const url = new URL(this.baseUrl);
        url.pathname = endpoint.replace(/:projectId/, projectId);
        const result = yield this.get(this.fetch, url);
        return { result, error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { result: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * @see https://developers.deepgram.com/reference/update-project
   */
  updateProject(projectId, options, endpoint = "v1/projects/:projectId") {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const url = new URL(this.baseUrl);
        url.pathname = endpoint.replace(/:projectId/, projectId);
        const body = JSON.stringify(options);
        const result = yield this.patch(this.fetch, url, body);
        return { result, error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { result: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * @see https://developers.deepgram.com/reference/delete-project
   */
  deleteProject(projectId, endpoint = "v1/projects/:projectId") {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const url = new URL(this.baseUrl);
        url.pathname = endpoint.replace(/:projectId/, projectId);
        yield this.delete(this.fetch, url);
        return { error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { error };
        }
        throw error;
      }
    });
  }
  /**
   * @see https://developers.deepgram.com/reference/list-keys
   */
  getProjectKeys(projectId, endpoint = "v1/projects/:projectId/keys") {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const url = new URL(this.baseUrl);
        url.pathname = endpoint.replace(/:projectId/, projectId);
        const result = yield this.get(this.fetch, url);
        return { result, error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { result: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * @see https://developers.deepgram.com/reference/get-key
   */
  getProjectKey(projectId, keyId, endpoint = "v1/projects/:projectId/keys/:keyId") {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const url = new URL(this.baseUrl);
        url.pathname = endpoint.replace(/:projectId/, projectId).replace(/:keyId/, keyId);
        const result = yield this.get(this.fetch, url);
        return { result, error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { result: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * @see https://developers.deepgram.com/reference/create-key
   */
  createProjectKey(projectId, options, endpoint = "v1/projects/:projectId/keys") {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const url = new URL(this.baseUrl);
        url.pathname = endpoint.replace(/:projectId/, projectId);
        const body = JSON.stringify(options);
        const result = yield this.post(this.fetch, url, body);
        return { result, error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { result: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * @see https://developers.deepgram.com/reference/delete-key
   */
  deleteProjectKey(projectId, keyId, endpoint = "v1/projects/:projectId/keys/:keyId") {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const url = new URL(this.baseUrl);
        url.pathname = endpoint.replace(/:projectId/, projectId).replace(/:keyId/, keyId);
        yield this.delete(this.fetch, url);
        return { error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { error };
        }
        throw error;
      }
    });
  }
  /**
   * @see https://developers.deepgram.com/reference/get-members
   */
  getProjectMembers(projectId, endpoint = "v1/projects/:projectId/members") {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const url = new URL(this.baseUrl);
        url.pathname = endpoint.replace(/:projectId/, projectId);
        const result = yield this.get(this.fetch, url);
        return { result, error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { result: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * @see https://developers.deepgram.com/reference/remove-member
   */
  removeProjectMember(projectId, memberId, endpoint = "v1/projects/:projectId/members/:memberId") {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const url = new URL(this.baseUrl);
        url.pathname = endpoint.replace(/:projectId/, projectId).replace(/:memberId/, memberId);
        yield this.delete(this.fetch, url);
        return { error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { error };
        }
        throw error;
      }
    });
  }
  /**
   * @see https://developers.deepgram.com/reference/get-member-scopes
   */
  getProjectMemberScopes(projectId, memberId, endpoint = "v1/projects/:projectId/members/:memberId/scopes") {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const url = new URL(this.baseUrl);
        url.pathname = endpoint.replace(/:projectId/, projectId).replace(/:memberId/, memberId);
        const result = yield this.get(this.fetch, url);
        return { result, error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { result: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * @see https://developers.deepgram.com/reference/update-scope
   */
  updateProjectMemberScope(projectId, memberId, options, endpoint = "v1/projects/:projectId/members/:memberId/scopes") {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const url = new URL(this.baseUrl);
        url.pathname = endpoint.replace(/:projectId/, projectId).replace(/:memberId/, memberId);
        const body = JSON.stringify(options);
        const result = yield this.put(this.fetch, url, body);
        return { result, error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { result: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * @see https://developers.deepgram.com/reference/list-invites
   */
  getProjectInvites(projectId, endpoint = "v1/projects/:projectId/invites") {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const url = new URL(this.baseUrl);
        url.pathname = endpoint.replace(/:projectId/, projectId);
        const result = yield this.get(this.fetch, url);
        return { result, error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { result: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * @see https://developers.deepgram.com/reference/send-invites
   */
  sendProjectInvite(projectId, options, endpoint = "v1/projects/:projectId/invites") {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const url = new URL(this.baseUrl);
        url.pathname = endpoint.replace(/:projectId/, projectId);
        const body = JSON.stringify(options);
        const result = yield this.post(this.fetch, url, body);
        return { result, error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { result: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * @see https://developers.deepgram.com/reference/delete-invite
   */
  deleteProjectInvite(projectId, email, endpoint = "v1/projects/:projectId/invites/:email") {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const url = new URL(this.baseUrl);
        url.pathname = endpoint.replace(/:projectId/, projectId).replace(/:email/, email);
        yield this.delete(this.fetch, url);
        return { error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { error };
        }
        throw error;
      }
    });
  }
  /**
   * @see https://developers.deepgram.com/reference/leave-project
   */
  leaveProject(projectId, endpoint = "v1/projects/:projectId/leave") {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const url = new URL(this.baseUrl);
        url.pathname = endpoint.replace(/:projectId/, projectId);
        const result = yield this.delete(this.fetch, url);
        return { result, error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { result: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * @see https://developers.deepgram.com/reference/get-all-requests
   */
  getProjectUsageRequests(projectId, options, endpoint = "v1/projects/:projectId/requests") {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const url = new URL(this.baseUrl);
        url.pathname = endpoint.replace(/:projectId/, projectId);
        appendSearchParams(url.searchParams, options);
        const result = yield this.get(this.fetch, url);
        return { result, error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { result: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * @see https://developers.deepgram.com/reference/get-request
   */
  getProjectUsageRequest(projectId, requestId, endpoint = "v1/projects/:projectId/requests/:requestId") {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const url = new URL(this.baseUrl);
        url.pathname = endpoint.replace(/:projectId/, projectId).replace(/:requestId/, requestId);
        const result = yield this.get(this.fetch, url);
        return { result, error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { result: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * @see https://developers.deepgram.com/reference/summarize-usage
   */
  getProjectUsageSummary(projectId, options, endpoint = "v1/projects/:projectId/usage") {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const url = new URL(this.baseUrl);
        url.pathname = endpoint.replace(/:projectId/, projectId);
        appendSearchParams(url.searchParams, options);
        const result = yield this.get(this.fetch, url);
        return { result, error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { result: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * @see https://developers.deepgram.com/reference/get-fields
   */
  getProjectUsageFields(projectId, options, endpoint = "v1/projects/:projectId/usage/fields") {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const url = new URL(this.baseUrl);
        url.pathname = endpoint.replace(/:projectId/, projectId);
        appendSearchParams(url.searchParams, options);
        const result = yield this.get(this.fetch, url);
        return { result, error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { result: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * @see https://developers.deepgram.com/reference/get-all-balances
   */
  getProjectBalances(projectId, endpoint = "v1/projects/:projectId/balances") {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const url = new URL(this.baseUrl);
        url.pathname = endpoint.replace(/:projectId/, projectId);
        const result = yield this.get(this.fetch, url);
        return { result, error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { result: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * @see https://developers.deepgram.com/reference/get-balance
   */
  getProjectBalance(projectId, balanceId, endpoint = "v1/projects/:projectId/balances/:balanceId") {
    return __awaiter4(this, void 0, void 0, function* () {
      try {
        const url = new URL(this.baseUrl);
        url.pathname = endpoint.replace(/:projectId/, projectId).replace(/:balanceId/, balanceId);
        const result = yield this.get(this.fetch, url);
        return { result, error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { result: null, error };
        }
        throw error;
      }
    });
  }
};

// node_modules/@deepgram/sdk/dist/module/packages/OnPremClient.js
var __awaiter5 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var OnPremClient = class extends AbstractRestfulClient {
  /**
   * @see https://developers.deepgram.com/reference/list-credentials
   */
  listCredentials(projectId, endpoint = "v1/projects/:projectId/onprem/distribution/credentials") {
    return __awaiter5(this, void 0, void 0, function* () {
      try {
        const url = new URL(this.baseUrl);
        url.pathname = endpoint.replace(/:projectId/, projectId);
        const result = yield this.get(this.fetch, url);
        return { result, error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { result: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * @see https://developers.deepgram.com/reference/get-credentials
   */
  getCredentials(projectId, credentialsId, endpoint = "v1/projects/:projectId/onprem/distribution/credentials/:credentialsId") {
    return __awaiter5(this, void 0, void 0, function* () {
      try {
        const url = new URL(this.baseUrl);
        url.pathname = endpoint.replace(/:projectId/, projectId).replace(/:credentialsId/, credentialsId);
        const result = yield this.get(this.fetch, url);
        return { result, error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { result: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * @see https://developers.deepgram.com/reference/create-credentials
   */
  createCredentials(projectId, options, endpoint = "v1/projects/:projectId/onprem/distribution/credentials") {
    return __awaiter5(this, void 0, void 0, function* () {
      try {
        const url = new URL(this.baseUrl);
        url.pathname = endpoint.replace(/:projectId/, projectId);
        const body = JSON.stringify(options);
        const result = yield this.post(this.fetch, url, body);
        return { result, error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { result: null, error };
        }
        throw error;
      }
    });
  }
  /**
   * @see https://developers.deepgram.com/reference/delete-credentials
   */
  deleteCredentials(projectId, credentialsId, endpoint = "v1/projects/:projectId/onprem/distribution/credentials/:credentialsId") {
    return __awaiter5(this, void 0, void 0, function* () {
      try {
        const url = new URL(this.baseUrl);
        url.pathname = endpoint.replace(/:projectId/, projectId).replace(/:credentialsId/, credentialsId);
        const result = yield this.delete(this.fetch, url);
        return { result, error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { result: null, error };
        }
        throw error;
      }
    });
  }
};

// node_modules/@deepgram/sdk/dist/module/packages/ReadClient.js
var __awaiter6 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var ReadClient = class extends AbstractRestfulClient {
  analyzeUrl(source, options, endpoint = "v1/read") {
    return __awaiter6(this, void 0, void 0, function* () {
      try {
        let body;
        if (isUrlSource(source)) {
          body = JSON.stringify(source);
        } else {
          throw new DeepgramError("Unknown source type");
        }
        if (options !== void 0 && "callback" in options) {
          throw new DeepgramError("Callback cannot be provided as an option to a synchronous transcription. Use `analyzeUrlCallback` or `analyzeTextCallback` instead.");
        }
        const analyzeOptions = Object.assign({}, options);
        const url = new URL(endpoint, this.baseUrl);
        appendSearchParams(url.searchParams, analyzeOptions);
        const result = yield this.post(this.fetch, url, body);
        return { result, error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { result: null, error };
        }
        throw error;
      }
    });
  }
  analyzeText(source, options, endpoint = "v1/read") {
    return __awaiter6(this, void 0, void 0, function* () {
      try {
        let body;
        if (isTextSource(source)) {
          body = JSON.stringify(source);
        } else {
          throw new DeepgramError("Unknown source type");
        }
        if (options !== void 0 && "callback" in options) {
          throw new DeepgramError("Callback cannot be provided as an option to a synchronous requests. Use `analyzeUrlCallback` or `analyzeTextCallback` instead.");
        }
        const analyzeOptions = Object.assign({}, options);
        const url = new URL(endpoint, this.baseUrl);
        appendSearchParams(url.searchParams, analyzeOptions);
        const result = yield this.post(this.fetch, url, body);
        return { result, error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { result: null, error };
        }
        throw error;
      }
    });
  }
  analyzeUrlCallback(source, callback, options, endpoint = "v1/read") {
    return __awaiter6(this, void 0, void 0, function* () {
      try {
        let body;
        if (isUrlSource(source)) {
          body = JSON.stringify(source);
        } else {
          throw new DeepgramError("Unknown source type");
        }
        const transcriptionOptions = Object.assign(Object.assign({}, options), { callback: callback.toString() });
        const url = new URL(endpoint, this.baseUrl);
        appendSearchParams(url.searchParams, transcriptionOptions);
        const result = yield this.post(this.fetch, url, body);
        return { result, error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { result: null, error };
        }
        throw error;
      }
    });
  }
  analyzeTextCallback(source, callback, options, endpoint = "v1/read") {
    return __awaiter6(this, void 0, void 0, function* () {
      try {
        let body;
        if (isTextSource(source)) {
          body = JSON.stringify(source);
        } else {
          throw new DeepgramError("Unknown source type");
        }
        const transcriptionOptions = Object.assign(Object.assign({}, options), { callback: callback.toString() });
        const url = new URL(endpoint, this.baseUrl);
        appendSearchParams(url.searchParams, transcriptionOptions);
        const result = yield this.post(this.fetch, url, body, {
          "Content-Type": "deepgram/audio+video"
        });
        return { result, error: null };
      } catch (error) {
        if (isDeepgramError(error)) {
          return { result: null, error };
        }
        throw error;
      }
    });
  }
};

// node_modules/@deepgram/sdk/dist/module/packages/SpeakClient.js
var __awaiter7 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var SpeakClient = class extends AbstractRestfulClient {
  /**
   * @see https://developers.deepgram.com/reference/text-to-speech-api
   */
  request(source, options, endpoint = "v1/speak") {
    return __awaiter7(this, void 0, void 0, function* () {
      try {
        let body;
        if (isTextSource(source)) {
          body = JSON.stringify(source);
        } else {
          throw new DeepgramError("Unknown transcription source type");
        }
        const speakOptions = Object.assign({ model: "aura-asteria-en" }, options);
        const url = new URL(endpoint, this.baseUrl);
        appendSearchParams(url.searchParams, speakOptions);
        this.result = yield this._handleRawRequest(this.fetch, "POST", url, {}, {}, body);
        return this;
      } catch (error) {
        throw error;
      }
    });
  }
  getStream() {
    return __awaiter7(this, void 0, void 0, function* () {
      if (!this.result)
        throw new DeepgramUnknownError("Tried to get stream before making request", "");
      return this.result.body;
    });
  }
  getHeaders() {
    return __awaiter7(this, void 0, void 0, function* () {
      if (!this.result)
        throw new DeepgramUnknownError("Tried to get headers before making request", "");
      return this.result.headers;
    });
  }
};

// node_modules/@deepgram/sdk/dist/module/DeepgramClient.js
var DeepgramClient = class extends AbstractClient {
  get listen() {
    return new ListenClient(this.key, this.options);
  }
  get manage() {
    return new ManageClient(this.key, this.options);
  }
  get onprem() {
    return new OnPremClient(this.key, this.options);
  }
  get read() {
    return new ReadClient(this.key, this.options);
  }
  get speak() {
    return new SpeakClient(this.key, this.options);
  }
  /**
   * Major version fallback errors are below
   *
   * @see https://developers.deepgram.com/docs/js-sdk-v2-to-v3-migration-guide
   */
  get transcription() {
    throw new DeepgramVersionError();
  }
  get projects() {
    throw new DeepgramVersionError();
  }
  get keys() {
    throw new DeepgramVersionError();
  }
  get members() {
    throw new DeepgramVersionError();
  }
  get scopes() {
    throw new DeepgramVersionError();
  }
  get invitation() {
    throw new DeepgramVersionError();
  }
  get usage() {
    throw new DeepgramVersionError();
  }
  get billing() {
    throw new DeepgramVersionError();
  }
};

// node_modules/@deepgram/sdk/dist/module/index.js
var createClient = (apiKey, options = {}) => {
  return new DeepgramClient(apiKey, options);
};

// main.ts
var DEFAULT_SETTINGS = {
  apiKey: "",
  summarize: false,
  topic_detection: false,
  intent_detection: false,
  sentiment: false,
  smart_format: true,
  punctuation: true,
  paragraphs: false,
  utterances: false,
  filler_words: false
};
var DeepgramPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.isRecording = false;
  }
  // Add this line to declare the mediaRecorder property
  async onload() {
    console.log("Loading Deepgram plugin");
    await this.loadSettings();
    this.addCommand({
      id: "toggle-transcription",
      name: "Toggle Transcription",
      callback: () => {
        if (this.isRecording) {
          this.stopTranscription();
        } else {
          this.startTranscription();
        }
      }
    });
    this.statusBarItem = this.addStatusBarItem();
    this.updateStatusBarItem();
    this.addSettingTab(new DeepgramSettingTab(this.app, this));
    console.log("Deepgram plugin loaded");
  }
  async onunload() {
    console.log("Unloading Deepgram plugin");
    if (this.isRecording) {
      await this.stopTranscription();
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  updateStatusBarItem() {
    this.statusBarItem.setText(
      this.isRecording ? "Recording" : "Not Recording"
    );
  }
  async startTranscription() {
    console.log("Starting transcription");
    const options = {
      model: "nova-2",
      language: "en-US",
      smart_format: this.settings.smart_format,
      summarize: this.settings.summarize,
      topic_detection: this.settings.topic_detection,
      intent_detection: this.settings.intent_detection,
      sentiment: this.settings.sentiment,
      punctuation: this.settings.punctuation,
      paragraphs: this.settings.paragraphs,
      utterances: this.settings.utterances,
      filler_words: this.settings.filler_words,
      interim_results: true
    };
    const deepgramClient = createClient(this.settings.apiKey);
    const deepgram = deepgramClient.listen.live(options);
    this.deepgram = deepgram;
    console.log("Deepgram client created", deepgram);
    this.deepgram.addListener(LiveTranscriptionEvents.Open, () => {
      console.log("Deepgram connection opened");
      this.isRecording = true;
      this.updateStatusBarItem();
      this.deepgram.addListener(LiveTranscriptionEvents.Transcript, (data) => {
        const transcript = data.channel.alternatives[0].transcript;
        const isFinal = data.is_final;
        const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (activeView) {
          const editor = activeView.editor;
          const currentPosition = editor.getCursor();
          console.log("Transcript: ", transcript);
          if (isFinal) {
            console.log("Final transcript:", transcript);
            const startPosition = currentPosition;
            editor.replaceRange(transcript, startPosition);
            const endPosition = {
              line: currentPosition.line,
              ch: currentPosition.ch + transcript.length
            };
            editor.setCursor(endPosition);
          } else {
            console.log("Partial transcript:", transcript);
          }
        }
      });
    });
    this.deepgram.addListener(LiveTranscriptionEvents.Error, (error) => {
      console.error("Deepgram error:", error);
      this.stopTranscription();
    });
    const mediaStream = await navigator.mediaDevices.getUserMedia({
      audio: true
    });
    const mediaRecorder = new MediaRecorder(mediaStream, {
      mimeType: "audio/webm"
    });
    this.mediaRecorder = mediaRecorder;
    mediaRecorder.addEventListener("dataavailable", (event) => {
      if (event.data.size > 0) {
        deepgram.send(event.data);
      }
    });
    mediaRecorder.start(1e3);
  }
  async stopTranscription() {
    console.log("Stopping transcription");
    this.isRecording = false;
    this.updateStatusBarItem();
    this.deepgram.finish();
    if (this.mediaRecorder && this.mediaRecorder.state !== "inactive") {
      this.mediaRecorder.stop();
    }
  }
};
var DeepgramSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Deepgram API Key").setDesc("Enter your Deepgram API key").addText(
      (text) => text.setPlaceholder("API Key").setValue(this.plugin.settings.apiKey).onChange(async (value) => {
        console.log("Deepgram API key updated");
        this.plugin.settings.apiKey = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Summarize").setDesc("Enable summarization").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.summarize).onChange(async (value) => {
        this.plugin.settings.summarize = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Topic Detection").setDesc("Enable topic detection").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.topic_detection).onChange(async (value) => {
        this.plugin.settings.topic_detection = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Intent Detection").setDesc("Enable intent detection").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.intent_detection).onChange(async (value) => {
        this.plugin.settings.intent_detection = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Sentiment").setDesc("Enable sentiment analysis").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.sentiment).onChange(async (value) => {
        this.plugin.settings.sentiment = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Smart Formatting").setDesc("Enable smart formatting").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.smart_format).onChange(async (value) => {
        this.plugin.settings.smart_format = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Punctuation").setDesc("Enable punctuation").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.punctuation).onChange(async (value) => {
        this.plugin.settings.punctuation = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Paragraphs").setDesc("Enable paragraph detection").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.paragraphs).onChange(async (value) => {
        this.plugin.settings.paragraphs = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Utterances").setDesc("Enable utterance detection").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.utterances).onChange(async (value) => {
        this.plugin.settings.utterances = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Filler Words").setDesc("Include filler words").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.filler_words).onChange(async (value) => {
        this.plugin.settings.filler_words = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
